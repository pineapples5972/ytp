#!/usr/bin/env bash

## ytp
## by drew
## also anjune
## uo.is.ou@gmail.com
## GPL v. 2

api_key="AIzaSyB-7sMMx9lMexjq3ZWZAzw3Csi7zOF98nE"
# these API keys have quotas. If you hit limits, create your own here: https://console.developers.google.com/
maxresults=5
player="mpv"

magenta="\033[35;1m"
cyan="\033[36;1m"
green="\033[32;1m"
yellow="\033[33;1m"
red="\033[31;1m"
nc="\033[m"

for thing in jq youtube-dl; do
	if ! hash $thing 2>/dev/null; then
		echo -e "This script requires the ${magenta}$thing${nc} command. It's probably in your repos."
		exit
	fi
done
if ! hash $player 2>/dev/null; then
	echo -e "You do not have ${magenta}$player${nc} installed. Please install it or choose another player."
	exit
fi

if [[ "$#" -gt 2 ]] || [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
	echo -e "Usage: `basename $0` \"some search\" [maxresults]\n\nwhere [maxresults] is an integer from 1 to 10 (defaults to $maxresults)"
	exit
elif [[ ! -z "$2" ]] && [[ "$2" =~ ^[0-9]+$ ]] && [[ "$2" -le 10 ]] && [[ "$2" -ge 1 ]]; then
	maxresults=$2
fi

searchterm=$1

if [[ "$searchterm" = "" ]]; then
    searchterm="friday"
fi

api_url="https://www.googleapis.com/youtube/v3/search"
video_url="https://www.youtube.com/watch?v="
pagenum=1
searchtype="search"
letters=(a s d f j k l w e i)
declare -A numbers=([a]=1 [s]=2 [d]=3 [f]=4 [j]=5 [k]=6 [l]=7 [w]=8 [e]=9 [i]=10)

ytsearch () {
	echo "Searching ..."
	if [[ -z "$1" ]]; then
		videolist=$(curl -G "$api_url" --data-urlencode "key=$api_key" --data-urlencode "part=snippet" --data-urlencode "type=video" --data-urlencode "maxResults=$maxresults" --data-urlencode "fields=items(snippet/title,snippet/channelTitle,snippet/description,snippet/publishedAt,id/videoId),nextPageToken,prevPageToken" --data-urlencode "q=$searchterm" 2>/dev/null)
	else
		videolist=$(curl -G "$api_url" --data-urlencode "key=$api_key" --data-urlencode "part=snippet" --data-urlencode "type=video" --data-urlencode "maxResults=$maxresults" --data-urlencode "fields=items(snippet/title,snippet/channelTitle,snippet/description,snippet/publishedAt,id/videoId),nextPageToken,prevPageToken" --data-urlencode "q=$searchterm" --data-urlencode "pageToken=$1" 2>/dev/null)
	fi
	prev=$(echo $videolist | jq -r "[.][].prevPageToken")
	next=$(echo $videolist | jq -r "[.][].nextPageToken")
	draw_search
}

search_related () {
	videolist=$(curl -G "$api_url" --data-urlencode "key=$api_key" --data-urlencode "part=snippet" --data-urlencode "type=video" --data-urlencode "maxResults=$maxresults" --data-urlencode "fields=items(snippet/title,snippet/channelTitle,snippet/description,snippet/publishedAt,id/videoId),nextPageToken,prevPageToken" --data-urlencode "relatedToVideoId=$vidid" 2>/dev/null)
	prev=$(echo $videolist | jq -r "[.][].prevPageToken")
	next=$(echo $videolist | jq -r "[.][].nextPageToken")
	draw_search
}
search_header () {
	if [[ "$searchtype" = "search" ]]; then
		echo -e "Searched for: $searchterm"
	else
		echo -e "Related to: $vidtitle"
	fi
	echo -e "Page: $pagenum\n"
}
search_footer () {
	echo -e "\nEnter a ${magenta}number${nc} to watch the video in $player."
	if [[ "$player" = "mpv" ]] ; then
        echo -e "Enter a ${yellow}Capital Letter${nc} to play only the audio portion of the video."
    fi
	echo -e "Enter a ${cyan}letter${nc} for more information and related videos."

	nexttext=""
	if [[ "$next" != "null" ]]; then
		nexttext="[${green}n${nc}]ext page"
	fi
	if [[ "$prev" != "null" ]]; then
		nextsep=""
		if [[ "$nexttext" != "" ]]; then
			nextsep=", "
		fi
		nexttext="$nexttext$nextsep[${green}p${nc}]revious page"
	fi
	nexttext="$nexttext, [${green}x${nc}] new search, [${green}c${nc}]hange max results"
	echo -e $nexttext
}

draw_details () {
	vidid=$(echo $videolist | jq -r "[.][].items[$1].id.videoId")
	vidtitle=$(echo $videolist | jq -r "[.][].items[$1].snippet.title")
	channeltitle=$(echo $videolist | jq -r "[.][].items[$1].snippet.channelTitle")
	pubdate=$(echo $videolist | jq -r "[.][].items[$1].snippet.publishedAt")
	description=$(echo $videolist | jq -r "[.][].items[$1].snippet.description")
	echo -e "\n  ${red}$vidtitle${nc}"
	echo -e "by $channeltitle"
	echo -e "\n$description"
	pdate=$(date -d "$pubdate" "+%A %-d %B, %Y")
	echo -e "\n  Published: $pdate"
	echo -e "  url: $video_url$vidid\n"
	details_footer
}

details_footer () {
	echo -e "[${green}w${nc}]atch, [${green}m${nc}] see related videos, [${green}b${nc}]ack to search"
	command_line
}

handle_input () {
	case $userinput in
		[asdfjkleri] )
			selectedvid=$(( ${numbers[$userinput]} - 1 ))
			draw_details $selectedvid
			;;
		[1-9]|10 )
			if [[ $userinput -le $maxresults ]]; then
				playvid=$(( $userinput -1 ))
				echo "Launching $player"
				$player $video_url${vididsa[$playvid]} 1>/dev/null 2>&1 &
				command_line
			else
				command_line "Invalid number"
			fi
			;;
		[ASDFJKLERI] )
            userinput=${numbers[${userinput,,}]}
            if [[ "$player" = "mpv" ]] && [[ $userinput -le $maxresults ]]; then
				playvid=$(( $userinput - 1 ))
				echo "Launching $player"
				$player --no-video --player-operation-mode=pseudo-gui $video_url${vididsa[$playvid]} 1>/dev/null 2>&1 &
				command_line
			else
				command_line "Invalid command"
			fi
			;;			
		n )
			if [[ "$next" != "null" ]]; then
				pagenum=$(( pagenum + 1 ))
				ytsearch $next
			else
				command_line "Invalid command"
			fi
			;;
		p )
			if [[ "$prev" != "null" ]]; then
				pagenum=$(( pagenum - 1 ))
				ytsearch $prev
			else
				command_line "Invalid command"
			fi
			;;
		x )
			read -p "Search for: " searchterm
			pagenum=1
			searchtype="search"
			ytsearch
			;;
		c )
			new_maxresults
			;;
		w )
			echo "Launching $player"
			$player $video_url$vidid 1>/dev/null 2>&1 &
			command_line
			;;
		m )
			if [[ -z "$vidid" ]]; then
				command_line "Invalid command"
			else
				pagenum=1
				searchtype="related"
				search_related
			fi
			;;
		b )
			draw_search
			;;
		q|:q|exit|close|quit )
			exit
			;;
		* )
			command_line "Invalid command"
			;;
	esac

}

new_maxresults () {
	read -p "Enter a number (1-10): " newmaxresults
	if [[ "$newmaxresults" =~ ^[0-9]+$ ]] && [[ "$newmaxresults" -le 10 ]] && [[ "$newmaxresults" -ge 1 ]]; then
		maxresults=$newmaxresults
		pagenum=1
		if [[ "$searchtype" = "search" ]]; then
			ytsearch
		else
			search_related
		fi
	else
		echo "Invalid number, try again..."
		new_maxresults
	fi

}
command_line () {
	if [[ ! -z "$1" ]]; then
		echo $1
	fi
	read -p "Command: " userinput
	handle_input
}

draw_search () {
	search_header
	vidids=$(echo $videolist | jq -r "[.][].items[].id.videoId")
	mapfile -t vididsa < <( printf "%s\n" "$vidids" )
	vidtitles=$(echo $videolist | jq -r "[.][].items[].snippet.title")
	mapfile -t vidtitlesa < <( printf "%s\n" "$vidtitles" )
	for v in "${!vididsa[@]}"; do
		n=$(( $v + 1 ))
		sep=" "
		if [ "$n" -ge 10 ]; then
			sep=""
		fi
		echo -en "  $sep${magenta}$n${nc}. "
		if [[ "$player" = "mpv" ]]; then 
            echo -en "[${yellow}${letters[$v]^^}${nc}] "
        fi
		echo -e "[${cyan}${letters[$v]}${nc}] ${vidtitlesa[$v]}"
	done
	search_footer
	command_line
}

ytsearch
